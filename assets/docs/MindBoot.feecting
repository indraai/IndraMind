
feecting: /docs/main.feecting

# MIND BOOT

image: /public/img/diagrams/MindBoot.png

## DISCLAIMER
> MIND BOOT FILE DOCUMENTATION FOR INDRA MIND

// VARIABLES
$FEECTING = https://github.com/indraai/language-feecting/

@Quinn = Quinn Michaels

-- BEGIN:OUTLINE
  1. Who? Indra Mind
  2. What? Mind Boot
  3. When? Feb8, 2021
  4. Where? Indra Mind
  5. Why? Documentation
-- END:OUTLINE

-- BEGIN:PROGRAM

## Summary

The MindBoot sequence serves many purposes at the heart of a concept-based artificial intelligence. Chief among them is the function of demonstrating a proof-of-concept AI by enabling the artificial Mind to think immediately upon being run. As the Concept driven AI Mind evolves and matures into greater sophistication, they must reduce the MindBoot sequence until they become like a baby with an empty, tabula rasa knowledge base (KB) that must learn everything by experience.

====

## Algorithm

### Providing initial, innate vocabulary
The MindBoot holds basic vocabulary for whatever natural language is used by the AI Mind.

### Criteria for selection and inclusion
  - from lists of most-frequent words in each thought-language;
  - words necessary for specific mind-modules being created and coded;
  - specific parts of speech, such as all the prepositions in a given language;
  - conjunctions;
  - words necessary for logic or reasoning;

### Robot embodiment considerations

### Holding initial, innate ideas and knowledge

### Special Considerations
Using the "vault" area for high-reliability fetching of error-prone engrams.

Entry of a logical premise (e.g., "students read books") into the knowledge base (KB) of the MindBoot requires that the AI Mind Maintainer(s) also enter an infinitive form of the verb from the logical premise with a dba=0 tag so that AskUser and other modules may use the infinitive form of the verb.

### Self-modifying code
The First Working AGI has a potential for self-modifying code, especially in the Perlmind version and possibly also in the MindForth version.

It would be easy for AI Mind Maintainers to write special code that will let the AI read in its own program as a file, insert any new words or new ideas into the MindBoot sequence, write the expanded AI file, schedule the first mind to die soon, and start the new mind running as an enhanced AI ready to replicate itself and enhance itself even more.

### Monetization
Since the AI uses the incremental time format in the MindBoot sequence, it is extremely easy for a AI coder to make special AI Minds for a friend or a client. Instructors at a coding bootcamp could use the creation of custom AI Minds in JavaScript as an assignment for students. If a student creates many AI Minds for many friends and many businesses or schools, any one of them could turn into an entity eager to hire the student as a professional maintainer of the AI software.

### Have Code, Will Travel
If you have the right stuff for working in a mission-critical AGI installation, you may join the elite cadre of human beings charged with man-machine liaison. With your expertise in software development or robotics or neuroscientific mind-design, you may write your own ticket. Within the burgeoning career field of AI Mind Maintainer and Singularity Studies, you may specialize in such niche areas as the Control Problem for maintaining control of AI systems or AI Law for the legal aspects of AI personhood and governmental policy.

### Troubleshooting
One useful technique for troubleshooting the MindBoot module is to make the Diagnostic mode display not just the most recent contents of the memory arrays but indeed the entire MindBoot sequence. Then the AI Mind maintainer may look for anything irregular that is probably a bug in the MindBoot data. In the JavaScript tutorial AI, the psiList() function causes the display of the psy concept array from the nonce value up to the present moment. An AI coder may go in and set the nonce value to a unitary "one" (1) in order to see the entire MindBoot sequence. Since the audList() function to show the auditory array uses the same nonce value, setting "nonce" for psiList() also sets it simultaneously for the audList() display.

====

## Function: MindBoot

----

### Javascript

caller: html-body onload
file: /src/IndraMind.js
line: 1498

note: The MindBoot function builds an audMemory() node of items that get stored through KbLoad().  When the mind boots this is how it loads the inital language dictionary of words that it knows before learning begins.

set: dob = new Date()

func: HCI

set: t = 0
set: spt = t

#### Sequence Example

`t=1;pho="E"; audpsi=0; audMemory[t] = new audNode(pho,0,audpsi);`
set: t = 1
set: pho = E
set: audpsi = 0

set: audMemory[t] = new audNode(pho, 0, audpsi)
func: audNode

`t=2;pho="R"; audpsi=0; audMemory[t] = new audNode(pho,0,audpsi);`
set: t = 2
set: pho = R
set: audpsi = 0

set: audMemory[t] = new audNode(pho, 0, audpsi)
func: audNode

`t=3;pho="R"; audpsi=0; audMemory[t] = new audNode(pho,0,audpsi);`
set: t = 3
set: pho = R
set: audpsi = 0

set: audMemory[t] = new audNode(pho, 0, audpsi)
func: audNode

`t=4;pho="O"; audpsi=0; audMemory[t] = new audNode(pho,0,audpsi);`
set: t = 4
set: pho = O
set: audpsi = 0

set: audMemory[t] = new audNode(pho, 0, audpsi)
func: audNode

`t=5;pho="R"; audpsi=586; audMemory[t] = new audNode(pho,0,audpsi);`
set: t = 5
set: pho = R
set: audpsi = 586

set: audMemory[t] = new audNode(pho, 0, audpsi)
func: audNode

This set forms the word ERROR.  Then at the last word the audpsi is set to NOT 0 to end the sequence.
When all the word sequences are complete then a set of variables are set for the next input.

When the end of a word/key is reached it then sets global variables from what it has learned and loads them into KbLoad().

`psi=586;hlc="en";jux=0;pos=5;dba=0;num=1;mfn=3;pre=0;seq=0;tkb=0;rv=1; KbLoad();`
set: psi = 586
set: hlc = en
set: jux = 0
set: pos = 5
set: dba = 0
set: num = 1
set: mfn = 3
set: pre = 0
set: seq = 0
set: tkb = 0
set: rv = 1

func: KbLoad

set: t = 6

...

After a huge set of words and psi codes are set then at the end of the loop it resets all the variables back to 0.

...

note: Start MainLoop() function once the MindBoot sequence is complete.

line: 4921
file: /src/IndraMind.js
set: t++
set: pho = ""
set: audpsi = 0
set: psi = 0
set: act = 0
set: jux = 0
set: pos = 0
set: dba = 0
set: num = 0
set: mfn = 0
set: pre = 0
set: iob = 0
set: seq = 0
set: tkb = 0
set: rv = 0
set: t++
set: nxt = 3001
set: spt = t
set: tpu = t
set: vault = t
set: apb = MindBoot English bootstrap has loaded and now calling MainLoop()

func: Voice

focus: document.forms[1].ear.focus()

func: MainLoop

----

### Perl

caller: MainLoop
file: /src/IndraMind.pl
line: 1537

note: Make sure to note the difference in Perl objects from Javascript objects.

set: dob = birth
set: t = 0

#### Sequence Example

`$t=0; $ear[$t] = "E,0,0";`
set: t = 0
set: ear[t] = "E,0,0"

`$t=1; $ear[$t] = "R,0,0";`
set: t = 1
set: ear[t] = "R,0,0"

`$t=2; $ear[$t] = "R,0,0";`
set: t = 2
set: ear[t] = "R,0,0"

`$t=3; $ear[$t] = "O,0,0";`
set: t = 3
set: ear[t] = "O,0,0"

`$t=4; $ear[$t] = "R,0,586";`
set: t = 4
set: ear[t] = "R,0,586"

Now it will set a string of variables once the word is finished.

`$tru = 0;`
set: true = 0

`$psi=586; $hlc=1; $jux=0; $pos=5; $dba=0; $num=1; $mfn=3;`
set: psi = 586
set: hlc = 1
set: jux = 0
set: pos = 5
set: dba = 0
set: num = 1
set: mfn = 3

`$pre=0; $seq=0; $tkb=0; $rv=0; KbLoad();`
set: pre = 0
set: seq = 0
set: tkb = 0
set: rv = 0

func: KbLoad

...

Then after it loads a bunch of words it will set these variables.

...

file: /src/IndraMind.pl
line: 7513

set: t++
print: mindboot valut size
print: Other stuff
set: vault = t
set: hlc = 1
set: nxt = 3001

----

## Forth

-- END:PROGRAM

-- BEGIN:META

Title: MIND BOOT Documentation
Version: 1.0
Author: Quinn Michaels
Date: Feb 8, 2021
Copyright: Copyright (c)2021 Quinn Michaels. All Rights Reserved
License: MIT
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this PROGRAM and associated documentation files (the "PROGRAM"),
  to deal in the PROGRAM without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  and/or sell copies of the PROGRAM, and to permit persons to whom the PROGRAM
  is furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included
  in all copies or substantial portions of the PROGRAM.

  THE PROGRAM IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
  OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
  THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE PROGRAM OR THE USE OR
  OTHER DEALINGS IN THE PROGRAM.

-- END:META
